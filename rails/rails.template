gem 'clearance'
gem 'figaro'
gem 'haml'
gem 'role_model'

gem_group :development do
  gem 'meta_request'
  gem 'quiet_assets'
  gem 'rails-footnotes', '~> 4.0', github: 'josevalim/rails-footnotes'
  gem 'shog'
  gem 'spring'
end

gem_group :development, :test do
  gem 'factory_bot_rails'
  gem 'rspec-rails'
  gem 'spring-commands-rspec'
end

gem_group :test do
  gem 'capybara'
end

gem_group :staging, :production do
  gem 'puma'
end


# For all environments: add to config/application.rb

# Set timezone
gsub_file 'config/application.rb',
  "# config.time_zone = 'Central Time (US & Canada)'",
  "config.time_zone = 'Europe/Berlin'"

# Activate German locale
gsub_file 'config/application.rb',
  "# config.i18n.default_locale",
  "config.i18n.default_locale"

# Add error messages for locales
inject_into_file 'config/application.rb', after: "default_locale = :de" do <<-CODE


    config.i18n.enforce_available_locales = true
    I18n.enforce_available_locales = true
  CODE
end

# Add closing line
inject_into_file 'config/application.rb', before: "  end\nend" do <<-'RUBY'

    # Add custom configuration options
  RUBY
end


# For development
environment(nil, env: 'development') do
  "config.action_mailer.default_url_options = { host: 'app.localdev' }"

  "config.action_mailer.delivery_method = :smtp"
  "config.action_mailer.smtp_settings = { address: 'localhost', port: 1025 }"
end


# For staging

# Create environment
inside('config/environments') do
  run 'cp production.rb staging.rb'
end


# For production


# Initializers
initializer 'sentry.rb', <<-CODE
logger = ::Logger.new(STDOUT)
logger.level = ::Logger::WARN

Raven.configure do |config|
  config.dsn = Figaro.env.sentry_url
  config.current_environment = Rails.env
  # config.environments = %w[staging production]
  # config.excluded_exceptions = []
  config.logger = logger
  # config.tags = { environment: Rails.env }
  # config.processors = []
end
CODE


# Create Procfile
file 'Procfile', <<-CODE
web:      rails s -p $PORT -b localhost
CODE

# Create .rspec
file '.rspec', <<-CODE
--color
--format documentation
--require spec_helper
CODE
